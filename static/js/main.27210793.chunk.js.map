{"version":3,"sources":["logo.svg","assets/marijuana.jpg","components/Topnav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Topnav","props","useState","Navbar","color","light","expand","NavbarBrand","href","App","pageHeader","React","createRef","className","style","backgroundImage","require","ref","Container","Row","Col","sm","size","src","alt","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,oCCA3CD,EAAOC,QAAU,IAA0B,uC,mHCwD5BC,EA1CA,SAACC,GAAW,IAAD,EACIC,oBAAS,GADb,6BAKxB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,oB,sCC4BOC,MA5Cf,WAEE,IAAIC,EAAaC,IAAMC,YACvB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,eACb,yBAAKA,UAAU,oBACfC,MAAO,CAAEC,gBAAiB,OAAOC,EAAQ,IAA0B,KACnEC,IAAKP,KASP,4BAAQG,UAAU,cAChB,6BACA,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IACf,yBAAKC,IAAI,gJAAgJV,UAAU,WAAWW,IAAI,SAClL,uBAAGX,UAAU,YAAb,4BAEE,6BAFF,oCAKF,kBAACO,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IACf,yBAAKC,IAAI,yHAAyHV,UAAU,WAAWW,IAAI,SAC3J,uBAAGX,UAAU,YAAb,2BAEE,6BAFF,+CAMN,6BACA,kBAACY,EAAA,EAAD,CAAQH,KAAK,KAAKlB,MAAM,WAAxB,cChCYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.27210793.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/marijuana.014b29ca.jpg\";","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem } from 'reactstrap';\r\n\r\nconst Topnav = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">Dank Fingers.</NavbarBrand>\r\n        {/* <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/components/\">Home</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/reactstrap/reactstrap\">Buy</NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Options\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  Option 1\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  Option 2\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>\r\n                  Reset\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n        </Collapse> */}\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Topnav;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport Topnav from './components/Topnav.js'\nimport { Jumbotron, Container, Row, Col, Button } from 'reactstrap';\nimport './App.css';\n\nfunction App() {\n  \n  let pageHeader = React.createRef();\n  return (\n    <div className=\"App\">\n      <Topnav />\n      <div className=\"page-header\">\n        <div className=\"page-header-image\"\n        style={{ backgroundImage: \"url(\"+require(\"./assets/marijuana.jpg\")+\")\"}}\n        ref={pageHeader}\n        ></div>\n      </div>\n      {/* <Jumbotron className=\"main-jumbotron\">\n        <div className=\"jumbo-text\">\n          <h1 className=\"display-3\">Dank Fingers.</h1>\n          <p className=\"lead\">Smokin' Doobies? Keep those fingers Gucci.</p>\n        </div>\n      </Jumbotron> */}\n      <header className=\"App-header\">\n        <br />\n        <Container>\n          <Row>\n            <Col sm={{ size: 6 }}>\n              <img src='https://res.cloudinary.com/woahstorklearn/image/upload/c_crop,h_402,w_716,x_0,y_20/h_381,w_678/v1489533328/Sticky_Cannabis_Fingers_miacvj.jpg' className=\"App-logo\" alt=\"logo\" />\n              <p className=\"App-link\">\n                You got this problem bro?\n                <br />Shit so dank, yo fingers stank.\n              </p>\n            </Col>\n            <Col sm={{ size: 6 }}>\n              <img src='https://media.discordapp.net/attachments/161610906487226368/642551032181686323/silicone-thimbles-for-embroidery-03.png' className=\"App-logo\" alt=\"logo\" />\n              <p className=\"App-link\">\n                We got the solution bro.\n                <br />Dank Fingers. For the stickiest of icky.\n              </p></Col>\n          </Row>\n        </Container>\n        <br />\n        <Button size='lg' color=\"primary\">BUY NOW</Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}